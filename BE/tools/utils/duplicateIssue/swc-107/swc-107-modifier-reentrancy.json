[
  {
    "contract": "ModifierEntrancy",
    "source_map": "336:13:0",
    "line_no": [
      14
    ],
    "code": "Kh\u00f4ng c\u00f3 source code :(, FE t\u1ef1 \u0111i\u1ec1n \u1ee9ng v\u1edbi sourcemap nh\u00e9",
    "description": "Reentrancy in ModifierEntrancy.airDrop() (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#14-16):\n\tExternal calls:\n\t- supportsToken() (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#14)\n\t\t- require(bool)(keccak256(bytes)(abi.encodePacked(Nu Token)) == bank.supportsToken()) (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#20)\n\tState variables written after the call(s):\n\t- tokenBalance[msg.sender] += 20 (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#15)\n\tModifierEntrancy.tokenBalance (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#5) can be used in cross function reentrancies:\n\t- ModifierEntrancy.airDrop() (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#14-16)\n\t- ModifierEntrancy.hasNoBalance() (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#25-28)\n\t- ModifierEntrancy.tokenBalance (../../../tmp/user1/contracts/swc-107-modifier-reentrancy.sol#5)\n",
    "hint": "reentrancy-vulnerabilities",
    "issue_title": "reentrancy-no-eth",
    "swcID": "SWC-107",
    "swc_title": "Reentrancy",
    "swc_link": "https://swcregistry.io/docs/SWC-107/",
    "severity": "Medium"
  }
]